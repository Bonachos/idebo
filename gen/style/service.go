// Code generated by goa v3.1.1, DO NOT EDIT.
//
// style service
//
// Command:
// $ goa gen jpmenezes.com/idebo/design

package style

import (
	"context"

	styleviews "jpmenezes.com/idebo/gen/style/views"
)

// The style service makes it possible to view, add or remove styles.
type Service interface {
	// List all stored styles
	List(context.Context) (res StyleResultCollection, err error)
	// Show style by ID
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "tiny"
	Show(context.Context, *ShowPayload) (res *StyleResult, view string, err error)
	// Add new style and return its ID.
	Add(context.Context, *Style) (res string, err error)
	// Remove style
	Remove(context.Context, *RemovePayload) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "style"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"list", "show", "add", "remove"}

// StyleResultCollection is the result type of the style service list method.
type StyleResultCollection []*StyleResult

// ShowPayload is the payload type of the style service show method.
type ShowPayload struct {
	// ID of style to show
	ID string
	// View to render
	View *string
}

// StyleResult is the result type of the style service show method.
type StyleResult struct {
	// ID is the unique id of the style.
	ID string
	// Name of style
	Name string
}

// Style is the payload type of the style service add method.
type Style struct {
	// Name of style
	Name string
}

// RemovePayload is the payload type of the style service remove method.
type RemovePayload struct {
	// ID of style to remove
	ID string
}

// NotFound is the type returned when attempting to show or delete a viewer
// that does not exist.
type NotFound struct {
	// Message of error
	Message string
	// ID of missing viewer
	ID string
}

// Error returns an error description.
func (e *NotFound) Error() string {
	return "NotFound is the type returned when attempting to show or delete a viewer that does not exist."
}

// ErrorName returns "NotFound".
func (e *NotFound) ErrorName() string {
	return e.Message
}

// NewStyleResultCollection initializes result type StyleResultCollection from
// viewed result type StyleResultCollection.
func NewStyleResultCollection(vres styleviews.StyleResultCollection) StyleResultCollection {
	var res StyleResultCollection
	switch vres.View {
	case "default", "":
		res = newStyleResultCollection(vres.Projected)
	case "tiny":
		res = newStyleResultCollectionTiny(vres.Projected)
	}
	return res
}

// NewViewedStyleResultCollection initializes viewed result type
// StyleResultCollection from result type StyleResultCollection using the given
// view.
func NewViewedStyleResultCollection(res StyleResultCollection, view string) styleviews.StyleResultCollection {
	var vres styleviews.StyleResultCollection
	switch view {
	case "default", "":
		p := newStyleResultCollectionView(res)
		vres = styleviews.StyleResultCollection{Projected: p, View: "default"}
	case "tiny":
		p := newStyleResultCollectionViewTiny(res)
		vres = styleviews.StyleResultCollection{Projected: p, View: "tiny"}
	}
	return vres
}

// NewStyleResult initializes result type StyleResult from viewed result type
// StyleResult.
func NewStyleResult(vres *styleviews.StyleResult) *StyleResult {
	var res *StyleResult
	switch vres.View {
	case "default", "":
		res = newStyleResult(vres.Projected)
	case "tiny":
		res = newStyleResultTiny(vres.Projected)
	}
	return res
}

// NewViewedStyleResult initializes viewed result type StyleResult from result
// type StyleResult using the given view.
func NewViewedStyleResult(res *StyleResult, view string) *styleviews.StyleResult {
	var vres *styleviews.StyleResult
	switch view {
	case "default", "":
		p := newStyleResultView(res)
		vres = &styleviews.StyleResult{Projected: p, View: "default"}
	case "tiny":
		p := newStyleResultViewTiny(res)
		vres = &styleviews.StyleResult{Projected: p, View: "tiny"}
	}
	return vres
}

// newStyleResultCollection converts projected type StyleResultCollection to
// service type StyleResultCollection.
func newStyleResultCollection(vres styleviews.StyleResultCollectionView) StyleResultCollection {
	res := make(StyleResultCollection, len(vres))
	for i, n := range vres {
		res[i] = newStyleResult(n)
	}
	return res
}

// newStyleResultCollectionTiny converts projected type StyleResultCollection
// to service type StyleResultCollection.
func newStyleResultCollectionTiny(vres styleviews.StyleResultCollectionView) StyleResultCollection {
	res := make(StyleResultCollection, len(vres))
	for i, n := range vres {
		res[i] = newStyleResultTiny(n)
	}
	return res
}

// newStyleResultCollectionView projects result type StyleResultCollection to
// projected type StyleResultCollectionView using the "default" view.
func newStyleResultCollectionView(res StyleResultCollection) styleviews.StyleResultCollectionView {
	vres := make(styleviews.StyleResultCollectionView, len(res))
	for i, n := range res {
		vres[i] = newStyleResultView(n)
	}
	return vres
}

// newStyleResultCollectionViewTiny projects result type StyleResultCollection
// to projected type StyleResultCollectionView using the "tiny" view.
func newStyleResultCollectionViewTiny(res StyleResultCollection) styleviews.StyleResultCollectionView {
	vres := make(styleviews.StyleResultCollectionView, len(res))
	for i, n := range res {
		vres[i] = newStyleResultViewTiny(n)
	}
	return vres
}

// newStyleResult converts projected type StyleResult to service type
// StyleResult.
func newStyleResult(vres *styleviews.StyleResultView) *StyleResult {
	res := &StyleResult{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	return res
}

// newStyleResultTiny converts projected type StyleResult to service type
// StyleResult.
func newStyleResultTiny(vres *styleviews.StyleResultView) *StyleResult {
	res := &StyleResult{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	return res
}

// newStyleResultView projects result type StyleResult to projected type
// StyleResultView using the "default" view.
func newStyleResultView(res *StyleResult) *styleviews.StyleResultView {
	vres := &styleviews.StyleResultView{
		ID:   &res.ID,
		Name: &res.Name,
	}
	return vres
}

// newStyleResultViewTiny projects result type StyleResult to projected type
// StyleResultView using the "tiny" view.
func newStyleResultViewTiny(res *StyleResult) *styleviews.StyleResultView {
	vres := &styleviews.StyleResultView{
		ID:   &res.ID,
		Name: &res.Name,
	}
	return vres
}
