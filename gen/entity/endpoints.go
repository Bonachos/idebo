// Code generated by goa v3.1.1, DO NOT EDIT.
//
// entity endpoints
//
// Command:
// $ goa gen jpmenezes.com/idebo/design

package entity

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "entity" service endpoints.
type Endpoints struct {
	List        goa.Endpoint
	Show        goa.Endpoint
	Showbyfield goa.Endpoint
	Add         goa.Endpoint
	Update      goa.Endpoint
	Remove      goa.Endpoint
}

// NewEndpoints wraps the methods of the "entity" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		List:        NewListEndpoint(s),
		Show:        NewShowEndpoint(s),
		Showbyfield: NewShowbyfieldEndpoint(s),
		Add:         NewAddEndpoint(s),
		Update:      NewUpdateEndpoint(s),
		Remove:      NewRemoveEndpoint(s),
	}
}

// Use applies the given middleware to all the "entity" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.List = m(e.List)
	e.Show = m(e.Show)
	e.Showbyfield = m(e.Showbyfield)
	e.Add = m(e.Add)
	e.Update = m(e.Update)
	e.Remove = m(e.Remove)
}

// NewListEndpoint returns an endpoint function that calls the method "list" of
// service "entity".
func NewListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListPayload)
		res, err := s.List(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedEntityResultCollection(res, "default")
		return vres, nil
	}
}

// NewShowEndpoint returns an endpoint function that calls the method "show" of
// service "entity".
func NewShowEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ShowPayload)
		res, err := s.Show(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedEntityResult(res, "default")
		return vres, nil
	}
}

// NewShowbyfieldEndpoint returns an endpoint function that calls the method
// "showbyfield" of service "entity".
func NewShowbyfieldEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ShowbyfieldPayload)
		res, err := s.Showbyfield(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedEntityResult(res, "default")
		return vres, nil
	}
}

// NewAddEndpoint returns an endpoint function that calls the method "add" of
// service "entity".
func NewAddEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AddPayload)
		return s.Add(ctx, p)
	}
}

// NewUpdateEndpoint returns an endpoint function that calls the method
// "update" of service "entity".
func NewUpdateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UpdatePayload)
		return nil, s.Update(ctx, p)
	}
}

// NewRemoveEndpoint returns an endpoint function that calls the method
// "remove" of service "entity".
func NewRemoveEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*RemovePayload)
		return nil, s.Remove(ctx, p)
	}
}
