// Code generated by goa v3.1.1, DO NOT EDIT.
//
// entity views
//
// Command:
// $ goa gen jpmenezes.com/idebo/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// EntityResultCollection is the viewed result type that is projected based on
// a view.
type EntityResultCollection struct {
	// Type to project
	Projected EntityResultCollectionView
	// View to render
	View string
}

// EntityResult is the viewed result type that is projected based on a view.
type EntityResult struct {
	// Type to project
	Projected *EntityResultView
	// View to render
	View string
}

// EntityResultCollectionView is a type that runs validations on a projected
// type.
type EntityResultCollectionView []*EntityResultView

// EntityResultView is a type that runs validations on a projected type.
type EntityResultView struct {
	// ID is the unique id of the entity.
	ID *uint
	// Name of entity
	Name *string
	// Folder name of entity. Serves as entity identifier.
	Folder *string
	// Inactive entity (in maintenance)
	Inactive *bool
}

var (
	// EntityResultCollectionMap is a map of attribute names in result type
	// EntityResultCollection indexed by view name.
	EntityResultCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"folder",
			"inactive",
		},
	}
	// EntityResultMap is a map of attribute names in result type EntityResult
	// indexed by view name.
	EntityResultMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"folder",
			"inactive",
		},
	}
)

// ValidateEntityResultCollection runs the validations defined on the viewed
// result type EntityResultCollection.
func ValidateEntityResultCollection(result EntityResultCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateEntityResultCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateEntityResult runs the validations defined on the viewed result type
// EntityResult.
func ValidateEntityResult(result *EntityResult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateEntityResultView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateEntityResultCollectionView runs the validations defined on
// EntityResultCollectionView using the "default" view.
func ValidateEntityResultCollectionView(result EntityResultCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateEntityResultView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateEntityResultView runs the validations defined on EntityResultView
// using the "default" view.
func ValidateEntityResultView(result *EntityResultView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Folder == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("folder", "result"))
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 255, false))
		}
	}
	if result.Folder != nil {
		if utf8.RuneCountInString(*result.Folder) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.folder", *result.Folder, utf8.RuneCountInString(*result.Folder), 255, false))
		}
	}
	return
}
