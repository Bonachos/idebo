// Code generated by goa v3.1.1, DO NOT EDIT.
//
// entity service
//
// Command:
// $ goa gen jpmenezes.com/idebo/design

package entity

import (
	"context"

	entityviews "jpmenezes.com/idebo/gen/entity/views"

	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/postgres"
)

// The entity service makes it possible to view, add or remove entities.
type Service interface {
	// List all stored entities
	List(context.Context, *ListPayload) (res EntityResultCollection, err error)
	// Show entity by ID
	Show(context.Context, *ShowPayload) (res *EntityResult, err error)
	// Show entity by field
	Showbyfield(context.Context, *ShowbyfieldPayload) (res *EntityResult, err error)
	// Add new entity and return its ID.
	Add(context.Context, *AddPayload) (res string, err error)
	// Update the entity.
	Update(context.Context, *UpdatePayload) (err error)
	// Remove entity
	Remove(context.Context, *RemovePayload) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "entity"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [6]string{"list", "show", "showbyfield", "add", "update", "remove"}

// ListPayload is the payload type of the entity service list method.
type ListPayload struct {
	// Authentication header
	Authentication *string
}

// EntityResultCollection is the result type of the entity service list method.
type EntityResultCollection []*EntityResult

// ShowPayload is the payload type of the entity service show method.
type ShowPayload struct {
	// ID of entity to show
	ID string
	// Entity to render
	View *string
}

// EntityResult is the result type of the entity service show method.
type EntityResult struct {
	gorm.Model
	// Name of entity
	Name string
	// Folder name of entity. Serves as entity identifier.
	Folder string
	// Inactive entity (in maintenance)
	Inactive *bool
}

// ShowbyfieldPayload is the payload type of the entity service showbyfield
// method.
type ShowbyfieldPayload struct {
	// field name to filter by
	Fieldname string
	// field value to filter by
	Fieldvalue string
	// View to render
	View *string
}

// AddPayload is the payload type of the entity service add method.
type AddPayload struct {
	// Entity to add
	Entity *Entity
	// Authentication header
	Authentication *string
}

// UpdatePayload is the payload type of the entity service update method.
type UpdatePayload struct {
	// ID of entity to update
	ID string
	// Entity to update
	Entity *Entity
}

// RemovePayload is the payload type of the entity service remove method.
type RemovePayload struct {
	// ID of entity to remove
	ID string
}

// Entity describes an Entity or department of an organization.
type Entity struct {
	gorm.Model
	// Name of entity
	Name string
	// Folder name of entity. Serves as entity identifier.
	Folder string
	// Inactive entity (in maintenance)
	Inactive *bool
}

// NotFound is the type returned when attempting to show or delete a viewer
// that does not exist.
type NotFound struct {
	// Message of error
	Message string
	// ID of missing viewer
	ID string
}

// Error returns an error description.
func (e *NotFound) Error() string {
	return "NotFound is the type returned when attempting to show or delete a viewer that does not exist."
}

// ErrorName returns "NotFound".
func (e *NotFound) ErrorName() string {
	return e.Message
}

// NewEntityResultCollection initializes result type EntityResultCollection
// from viewed result type EntityResultCollection.
func NewEntityResultCollection(vres entityviews.EntityResultCollection) EntityResultCollection {
	return newEntityResultCollection(vres.Projected)
}

// NewViewedEntityResultCollection initializes viewed result type
// EntityResultCollection from result type EntityResultCollection using the
// given view.
func NewViewedEntityResultCollection(res EntityResultCollection, view string) entityviews.EntityResultCollection {
	p := newEntityResultCollectionView(res)
	return entityviews.EntityResultCollection{Projected: p, View: "default"}
}

// NewEntityResult initializes result type EntityResult from viewed result type
// EntityResult.
func NewEntityResult(vres *entityviews.EntityResult) *EntityResult {
	return newEntityResult(vres.Projected)
}

// NewViewedEntityResult initializes viewed result type EntityResult from
// result type EntityResult using the given view.
func NewViewedEntityResult(res *EntityResult, view string) *entityviews.EntityResult {
	p := newEntityResultView(res)
	return &entityviews.EntityResult{Projected: p, View: "default"}
}

// newEntityResultCollection converts projected type EntityResultCollection to
// service type EntityResultCollection.
func newEntityResultCollection(vres entityviews.EntityResultCollectionView) EntityResultCollection {
	res := make(EntityResultCollection, len(vres))
	for i, n := range vres {
		res[i] = newEntityResult(n)
	}
	return res
}

// newEntityResultCollectionView projects result type EntityResultCollection to
// projected type EntityResultCollectionView using the "default" view.
func newEntityResultCollectionView(res EntityResultCollection) entityviews.EntityResultCollectionView {
	vres := make(entityviews.EntityResultCollectionView, len(res))
	for i, n := range res {
		vres[i] = newEntityResultView(n)
	}
	return vres
}

// newEntityResult converts projected type EntityResult to service type
// EntityResult.
func newEntityResult(vres *entityviews.EntityResultView) *EntityResult {
	res := &EntityResult{
		Inactive: vres.Inactive,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Folder != nil {
		res.Folder = *vres.Folder
	}
	return res
}

// newEntityResultView projects result type EntityResult to projected type
// EntityResultView using the "default" view.
func newEntityResultView(res *EntityResult) *entityviews.EntityResultView {
	vres := &entityviews.EntityResultView{
		ID:       &res.ID,
		Name:     &res.Name,
		Folder:   &res.Folder,
		Inactive: res.Inactive,
	}
	return vres
}
