// Code generated by goa v3.1.1, DO NOT EDIT.
//
// geodata endpoints
//
// Command:
// $ goa gen jpmenezes.com/idebo/design

package geodata

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "geodata" service endpoints.
type Endpoints struct {
	List   goa.Endpoint
	Upload goa.Endpoint
	Remove goa.Endpoint
}

// NewEndpoints wraps the methods of the "geodata" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		List:   NewListEndpoint(s),
		Upload: NewUploadEndpoint(s),
		Remove: NewRemoveEndpoint(s),
	}
}

// Use applies the given middleware to all the "geodata" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.List = m(e.List)
	e.Upload = m(e.Upload)
	e.Remove = m(e.Remove)
}

// NewListEndpoint returns an endpoint function that calls the method "list" of
// service "geodata".
func NewListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListPayload)
		res, view, err := s.List(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedGeodataResultCollection(res, view)
		return vres, nil
	}
}

// NewUploadEndpoint returns an endpoint function that calls the method
// "upload" of service "geodata".
func NewUploadEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*FilesUpload)
		return s.Upload(ctx, p)
	}
}

// NewRemoveEndpoint returns an endpoint function that calls the method
// "remove" of service "geodata".
func NewRemoveEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*RemovePayload)
		return nil, s.Remove(ctx, p)
	}
}
