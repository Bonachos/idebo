// Code generated by goa v3.1.1, DO NOT EDIT.
//
// geodata views
//
// Command:
// $ goa gen jpmenezes.com/idebo/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// GeodataResultCollection is the viewed result type that is projected based on
// a view.
type GeodataResultCollection struct {
	// Type to project
	Projected GeodataResultCollectionView
	// View to render
	View string
}

// GeodataResultCollectionView is a type that runs validations on a projected
// type.
type GeodataResultCollectionView []*GeodataResultView

// GeodataResultView is a type that runs validations on a projected type.
type GeodataResultView struct {
	// ID is the unique id of the geodata file.
	ID *uint
	// Name of geodata file
	Name *string
	// Entity to which the geodata file belongs
	Entity     *string
	Entityname *string
}

var (
	// GeodataResultCollectionMap is a map of attribute names in result type
	// GeodataResultCollection indexed by view name.
	GeodataResultCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"entity",
			"entityname",
		},
		"tiny": []string{
			"id",
			"name",
			"entity",
			"entityname",
		},
	}
	// GeodataResultMap is a map of attribute names in result type GeodataResult
	// indexed by view name.
	GeodataResultMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"entity",
			"entityname",
		},
		"tiny": []string{
			"id",
			"name",
			"entity",
			"entityname",
		},
	}
)

// ValidateGeodataResultCollection runs the validations defined on the viewed
// result type GeodataResultCollection.
func ValidateGeodataResultCollection(result GeodataResultCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateGeodataResultCollectionView(result.Projected)
	case "tiny":
		err = ValidateGeodataResultCollectionViewTiny(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "tiny"})
	}
	return
}

// ValidateGeodataResultCollectionView runs the validations defined on
// GeodataResultCollectionView using the "default" view.
func ValidateGeodataResultCollectionView(result GeodataResultCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateGeodataResultView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGeodataResultCollectionViewTiny runs the validations defined on
// GeodataResultCollectionView using the "tiny" view.
func ValidateGeodataResultCollectionViewTiny(result GeodataResultCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateGeodataResultViewTiny(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGeodataResultView runs the validations defined on GeodataResultView
// using the "default" view.
func ValidateGeodataResultView(result *GeodataResultView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Entity == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("entity", "result"))
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 255, false))
		}
	}
	if result.Entity != nil {
		if utf8.RuneCountInString(*result.Entity) > 64 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.entity", *result.Entity, utf8.RuneCountInString(*result.Entity), 64, false))
		}
	}
	return
}

// ValidateGeodataResultViewTiny runs the validations defined on
// GeodataResultView using the "tiny" view.
func ValidateGeodataResultViewTiny(result *GeodataResultView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Entity == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("entity", "result"))
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 255, false))
		}
	}
	if result.Entity != nil {
		if utf8.RuneCountInString(*result.Entity) > 64 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.entity", *result.Entity, utf8.RuneCountInString(*result.Entity), 64, false))
		}
	}
	return
}
