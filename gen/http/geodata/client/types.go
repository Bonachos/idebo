// Code generated by goa v3.1.1, DO NOT EDIT.
//
// geodata HTTP client types
//
// Command:
// $ goa gen jpmenezes.com/idebo/design

package client

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
	geodata "jpmenezes.com/idebo/gen/geodata"
	geodataviews "jpmenezes.com/idebo/gen/geodata/views"
)

// UploadRequestBody is the type of the "geodata" service "upload" endpoint
// HTTP request body.
type UploadRequestBody struct {
	// Collection of uploaded files
	Files []*FileUploadRequestBody `form:"Files,omitempty" json:"Files,omitempty" xml:"Files,omitempty"`
}

// ListResponseBody is the type of the "geodata" service "list" endpoint HTTP
// response body.
type ListResponseBody []*GeodataResultResponse

// GeodataResultResponse is used to define fields on response body types.
type GeodataResultResponse struct {
	// ID is the unique id of the geodata file.
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of geodata file
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Entity to which the geodata file belongs
	Entity     *string `form:"entity,omitempty" json:"entity,omitempty" xml:"entity,omitempty"`
	Entityname *string `form:"entityname,omitempty" json:"entityname,omitempty" xml:"entityname,omitempty"`
}

// FileUploadRequestBody is used to define fields on request body types.
type FileUploadRequestBody struct {
	Type  *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	Bytes []byte  `form:"bytes,omitempty" json:"bytes,omitempty" xml:"bytes,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// NewUploadRequestBody builds the HTTP request body from the payload of the
// "upload" endpoint of the "geodata" service.
func NewUploadRequestBody(p *geodata.FilesUpload) *UploadRequestBody {
	body := &UploadRequestBody{}
	if p.Files != nil {
		body.Files = make([]*FileUploadRequestBody, len(p.Files))
		for i, val := range p.Files {
			body.Files[i] = marshalGeodataFileUploadToFileUploadRequestBody(val)
		}
	}
	return body
}

// NewListGeodataResultCollectionOK builds a "geodata" service "list" endpoint
// result from a HTTP "OK" response.
func NewListGeodataResultCollectionOK(body ListResponseBody) geodataviews.GeodataResultCollectionView {
	v := make([]*geodataviews.GeodataResultView, len(body))
	for i, val := range body {
		v[i] = unmarshalGeodataResultResponseToGeodataviewsGeodataResultView(val)
	}
	return v
}

// ValidateGeodataResultResponse runs the validations defined on
// GeodataResultResponse
func ValidateGeodataResultResponse(body *GeodataResultResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Entity == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("entity", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 255, false))
		}
	}
	if body.Entity != nil {
		if utf8.RuneCountInString(*body.Entity) > 64 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.entity", *body.Entity, utf8.RuneCountInString(*body.Entity), 64, false))
		}
	}
	return
}
