// Code generated by goa v3.1.1, DO NOT EDIT.
//
// geodata HTTP server encoders and decoders
//
// Command:
// $ goa gen jpmenezes.com/idebo/design

package server

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	geodata "jpmenezes.com/idebo/gen/geodata"
	geodataviews "jpmenezes.com/idebo/gen/geodata/views"
)

// EncodeListResponse returns an encoder for responses returned by the geodata
// list endpoint.
func EncodeListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(geodataviews.GeodataResultCollection)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewGeodataResultResponseCollection(res.Projected)
		case "tiny":
			body = NewGeodataResultResponseTinyCollection(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListRequest returns a decoder for requests sent to the geodata list
// endpoint.
func DecodeListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			authentication *string
		)
		authenticationRaw := r.Header.Get("Authorization")
		if authenticationRaw != "" {
			authentication = &authenticationRaw
		}
		payload := NewListPayload(authentication)

		return payload, nil
	}
}

// EncodeUploadResponse returns an encoder for responses returned by the
// geodata upload endpoint.
func EncodeUploadResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUploadRequest returns a decoder for requests sent to the geodata
// upload endpoint.
func DecodeUploadRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var payload *geodata.FilesUpload
		if err := decoder(r).Decode(&payload); err != nil {
			return nil, goa.DecodePayloadError(err.Error())
		}

		return payload, nil
	}
}

// NewGeodataUploadDecoder returns a decoder to decode the multipart request
// for the "geodata" service "upload" endpoint.
func NewGeodataUploadDecoder(mux goahttp.Muxer, geodataUploadDecoderFn GeodataUploadDecoderFunc) func(r *http.Request) goahttp.Decoder {
	return func(r *http.Request) goahttp.Decoder {
		return goahttp.EncodingFunc(func(v interface{}) error {
			mr, merr := r.MultipartReader()
			if merr != nil {
				return merr
			}
			p := v.(**geodata.FilesUpload)
			if err := geodataUploadDecoderFn(mr, p); err != nil {
				return err
			}
			return nil
		})
	}
}

// EncodeRemoveResponse returns an encoder for responses returned by the
// geodata remove endpoint.
func EncodeRemoveResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeRemoveRequest returns a decoder for requests sent to the geodata
// remove endpoint.
func DecodeRemoveRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewRemovePayload(id)

		return payload, nil
	}
}

// marshalGeodataviewsGeodataResultViewToGeodataResultResponse builds a value
// of type *GeodataResultResponse from a value of type
// *geodataviews.GeodataResultView.
func marshalGeodataviewsGeodataResultViewToGeodataResultResponse(v *geodataviews.GeodataResultView) *GeodataResultResponse {
	res := &GeodataResultResponse{
		ID:         *v.ID,
		Name:       *v.Name,
		Entity:     *v.Entity,
		Entityname: v.Entityname,
	}

	return res
}

// marshalGeodataviewsGeodataResultViewToGeodataResultResponseTiny builds a
// value of type *GeodataResultResponseTiny from a value of type
// *geodataviews.GeodataResultView.
func marshalGeodataviewsGeodataResultViewToGeodataResultResponseTiny(v *geodataviews.GeodataResultView) *GeodataResultResponseTiny {
	res := &GeodataResultResponseTiny{
		ID:         *v.ID,
		Name:       *v.Name,
		Entity:     *v.Entity,
		Entityname: v.Entityname,
	}

	return res
}

// unmarshalFileUploadRequestBodyToGeodataFileUpload builds a value of type
// *geodata.FileUpload from a value of type *FileUploadRequestBody.
func unmarshalFileUploadRequestBodyToGeodataFileUpload(v *FileUploadRequestBody) *geodata.FileUpload {
	if v == nil {
		return nil
	}
	res := &geodata.FileUpload{
		Type:  v.Type,
		Bytes: v.Bytes,
		Name:  v.Name,
	}

	return res
}
