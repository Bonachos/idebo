// Code generated by goa v3.1.1, DO NOT EDIT.
//
// geoserverStyle HTTP client encoders and decoders
//
// Command:
// $ goa gen jpmenezes.com/idebo/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
	geoserverstyle "jpmenezes.com/idebo/gen/geoserver_style"
	geoserverstyleviews "jpmenezes.com/idebo/gen/geoserver_style/views"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "geoserverStyle" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListGeoserverStylePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("geoserverStyle", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListRequest returns an encoder for requests sent to the geoserverStyle
// list server.
func EncodeListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*geoserverstyle.ListPayload)
		if !ok {
			return goahttp.ErrInvalidType("geoserverStyle", "list", "*geoserverstyle.ListPayload", v)
		}
		values := req.URL.Query()
		values.Add("geoserverURL", p.GeoserverURL)
		values.Add("entityid", p.Entityid)
		if p.View != nil {
			values.Add("view", *p.View)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListResponse returns a decoder for responses returned by the
// geoserverStyle list endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeListResponse may return the following errors:
//	- "not_found" (type *geoserverstyle.NotFound): http.StatusNotFound
//	- error: internal error
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("geoserverStyle", "list", err)
			}
			p := NewListStyleResultCollectionOK(body)
			view := "tiny"
			vres := geoserverstyleviews.StyleResultCollection{Projected: p, View: view}
			if err = geoserverstyleviews.ValidateStyleResultCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("geoserverStyle", "list", err)
			}
			res := geoserverstyle.NewStyleResultCollection(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ListNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("geoserverStyle", "list", err)
			}
			err = ValidateListNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("geoserverStyle", "list", err)
			}
			return nil, NewListNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("geoserverStyle", "list", resp.StatusCode, string(body))
		}
	}
}

// unmarshalStyleResultResponseToGeoserverstyleviewsStyleResultView builds a
// value of type *geoserverstyleviews.StyleResultView from a value of type
// *StyleResultResponse.
func unmarshalStyleResultResponseToGeoserverstyleviewsStyleResultView(v *StyleResultResponse) *geoserverstyleviews.StyleResultView {
	res := &geoserverstyleviews.StyleResultView{
		ID:   v.ID,
		Name: v.Name,
	}

	return res
}
