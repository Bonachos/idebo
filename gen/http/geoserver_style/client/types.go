// Code generated by goa v3.1.1, DO NOT EDIT.
//
// geoserverStyle HTTP client types
//
// Command:
// $ goa gen jpmenezes.com/idebo/design

package client

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
	geoserverstyle "jpmenezes.com/idebo/gen/geoserver_style"
	geoserverstyleviews "jpmenezes.com/idebo/gen/geoserver_style/views"
)

// ListResponseBody is the type of the "geoserverStyle" service "list" endpoint
// HTTP response body.
type ListResponseBody []*StyleResultResponse

// ListNotFoundResponseBody is the type of the "geoserverStyle" service "list"
// endpoint HTTP response body for the "not_found" error.
type ListNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing viewer
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// StyleResultResponse is used to define fields on response body types.
type StyleResultResponse struct {
	// ID is the unique id of the style.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of style
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// NewListStyleResultCollectionOK builds a "geoserverStyle" service "list"
// endpoint result from a HTTP "OK" response.
func NewListStyleResultCollectionOK(body ListResponseBody) geoserverstyleviews.StyleResultCollectionView {
	v := make([]*geoserverstyleviews.StyleResultView, len(body))
	for i, val := range body {
		v[i] = unmarshalStyleResultResponseToGeoserverstyleviewsStyleResultView(val)
	}
	return v
}

// NewListNotFound builds a geoserverStyle service list endpoint not_found
// error.
func NewListNotFound(body *ListNotFoundResponseBody) *geoserverstyle.NotFound {
	v := &geoserverstyle.NotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// ValidateListNotFoundResponseBody runs the validations defined on
// list_not_found_response_body
func ValidateListNotFoundResponseBody(body *ListNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateStyleResultResponse runs the validations defined on
// StyleResultResponse
func ValidateStyleResultResponse(body *StyleResultResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 255, false))
		}
	}
	return
}
