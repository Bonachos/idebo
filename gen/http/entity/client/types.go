// Code generated by goa v3.1.1, DO NOT EDIT.
//
// entity HTTP client types
//
// Command:
// $ goa gen jpmenezes.com/idebo/design

package client

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
	entity "jpmenezes.com/idebo/gen/entity"
	entityviews "jpmenezes.com/idebo/gen/entity/views"
)

// AddRequestBody is the type of the "entity" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// Entity to add
	Entity *EntityRequestBody `form:"entity,omitempty" json:"entity,omitempty" xml:"entity,omitempty"`
}

// UpdateRequestBody is the type of the "entity" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// Entity to update
	Entity *EntityRequestBody `form:"entity,omitempty" json:"entity,omitempty" xml:"entity,omitempty"`
}

// ListResponseBody is the type of the "entity" service "list" endpoint HTTP
// response body.
type ListResponseBody []*EntityResultResponse

// ShowResponseBody is the type of the "entity" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// ID is the unique id of the entity.
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of entity
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Folder name of entity. Serves as entity identifier.
	Folder *string `form:"folder,omitempty" json:"folder,omitempty" xml:"folder,omitempty"`
	// Inactive entity (in maintenance)
	Inactive *bool `form:"inactive,omitempty" json:"inactive,omitempty" xml:"inactive,omitempty"`
}

// ShowbyfieldResponseBody is the type of the "entity" service "showbyfield"
// endpoint HTTP response body.
type ShowbyfieldResponseBody struct {
	// ID is the unique id of the entity.
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of entity
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Folder name of entity. Serves as entity identifier.
	Folder *string `form:"folder,omitempty" json:"folder,omitempty" xml:"folder,omitempty"`
	// Inactive entity (in maintenance)
	Inactive *bool `form:"inactive,omitempty" json:"inactive,omitempty" xml:"inactive,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "entity" service "show" endpoint
// HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing viewer
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ShowbyfieldNotFoundResponseBody is the type of the "entity" service
// "showbyfield" endpoint HTTP response body for the "not_found" error.
type ShowbyfieldNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing viewer
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EntityResultResponse is used to define fields on response body types.
type EntityResultResponse struct {
	// ID is the unique id of the entity.
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of entity
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Folder name of entity. Serves as entity identifier.
	Folder *string `form:"folder,omitempty" json:"folder,omitempty" xml:"folder,omitempty"`
	// Inactive entity (in maintenance)
	Inactive *bool `form:"inactive,omitempty" json:"inactive,omitempty" xml:"inactive,omitempty"`
}

// EntityRequestBody is used to define fields on request body types.
type EntityRequestBody struct {
	// Name of entity
	Name string `form:"name" json:"name" xml:"name"`
	// Folder name of entity. Serves as entity identifier.
	Folder string `form:"folder" json:"folder" xml:"folder"`
	// Inactive entity (in maintenance)
	Inactive *bool `form:"inactive,omitempty" json:"inactive,omitempty" xml:"inactive,omitempty"`
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "entity" service.
func NewAddRequestBody(p *entity.AddPayload) *AddRequestBody {
	body := &AddRequestBody{}
	if p.Entity != nil {
		body.Entity = marshalEntityEntityToEntityRequestBody(p.Entity)
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "entity" service.
func NewUpdateRequestBody(p *entity.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{}
	if p.Entity != nil {
		body.Entity = marshalEntityEntityToEntityRequestBody(p.Entity)
	}
	return body
}

// NewListEntityResultCollectionOK builds a "entity" service "list" endpoint
// result from a HTTP "OK" response.
func NewListEntityResultCollectionOK(body ListResponseBody) entityviews.EntityResultCollectionView {
	v := make([]*entityviews.EntityResultView, len(body))
	for i, val := range body {
		v[i] = unmarshalEntityResultResponseToEntityviewsEntityResultView(val)
	}
	return v
}

// NewShowEntityResultOK builds a "entity" service "show" endpoint result from
// a HTTP "OK" response.
func NewShowEntityResultOK(body *ShowResponseBody) *entityviews.EntityResultView {
	v := &entityviews.EntityResultView{
		ID:       body.ID,
		Name:     body.Name,
		Folder:   body.Folder,
		Inactive: body.Inactive,
	}

	return v
}

// NewShowNotFound builds a entity service show endpoint not_found error.
func NewShowNotFound(body *ShowNotFoundResponseBody) *entity.NotFound {
	v := &entity.NotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewShowbyfieldEntityResultOK builds a "entity" service "showbyfield"
// endpoint result from a HTTP "OK" response.
func NewShowbyfieldEntityResultOK(body *ShowbyfieldResponseBody) *entityviews.EntityResultView {
	v := &entityviews.EntityResultView{
		ID:       body.ID,
		Name:     body.Name,
		Folder:   body.Folder,
		Inactive: body.Inactive,
	}

	return v
}

// NewShowbyfieldNotFound builds a entity service showbyfield endpoint
// not_found error.
func NewShowbyfieldNotFound(body *ShowbyfieldNotFoundResponseBody) *entity.NotFound {
	v := &entity.NotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// ValidateShowNotFoundResponseBody runs the validations defined on
// show_not_found_response_body
func ValidateShowNotFoundResponseBody(body *ShowNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateShowbyfieldNotFoundResponseBody runs the validations defined on
// showbyfield_not_found_response_body
func ValidateShowbyfieldNotFoundResponseBody(body *ShowbyfieldNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateEntityResultResponse runs the validations defined on
// EntityResultResponse
func ValidateEntityResultResponse(body *EntityResultResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Folder == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("folder", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 255, false))
		}
	}
	if body.Folder != nil {
		if utf8.RuneCountInString(*body.Folder) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.folder", *body.Folder, utf8.RuneCountInString(*body.Folder), 255, false))
		}
	}
	return
}

// ValidateEntityRequestBody runs the validations defined on EntityRequestBody
func ValidateEntityRequestBody(body *EntityRequestBody) (err error) {
	if utf8.RuneCountInString(body.Name) > 255 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 255, false))
	}
	if utf8.RuneCountInString(body.Folder) > 255 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.folder", body.Folder, utf8.RuneCountInString(body.Folder), 255, false))
	}
	return
}
