// Code generated by goa v3.1.1, DO NOT EDIT.
//
// entity HTTP client CLI support package
//
// Command:
// $ goa gen jpmenezes.com/idebo/design

package client

import (
	"encoding/json"
	"fmt"

	goa "goa.design/goa/v3/pkg"
	entity "jpmenezes.com/idebo/gen/entity"
)

// BuildListPayload builds the payload for the entity list endpoint from CLI
// flags.
func BuildListPayload(entityListAuthentication string) (*entity.ListPayload, error) {
	var authentication *string
	{
		if entityListAuthentication != "" {
			authentication = &entityListAuthentication
		}
	}
	v := &entity.ListPayload{}
	v.Authentication = authentication

	return v, nil
}

// BuildShowPayload builds the payload for the entity show endpoint from CLI
// flags.
func BuildShowPayload(entityShowID string, entityShowView string) (*entity.ShowPayload, error) {
	var err error
	var id string
	{
		id = entityShowID
	}
	var view *string
	{
		if entityShowView != "" {
			view = &entityShowView
			if view != nil {
				if !(*view == "default") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &entity.ShowPayload{}
	v.ID = id
	v.View = view

	return v, nil
}

// BuildShowbyfieldPayload builds the payload for the entity showbyfield
// endpoint from CLI flags.
func BuildShowbyfieldPayload(entityShowbyfieldFieldname string, entityShowbyfieldFieldvalue string, entityShowbyfieldView string) (*entity.ShowbyfieldPayload, error) {
	var err error
	var fieldname string
	{
		fieldname = entityShowbyfieldFieldname
	}
	var fieldvalue string
	{
		fieldvalue = entityShowbyfieldFieldvalue
	}
	var view *string
	{
		if entityShowbyfieldView != "" {
			view = &entityShowbyfieldView
			if view != nil {
				if !(*view == "default" || *view == "tiny") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "tiny"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &entity.ShowbyfieldPayload{}
	v.Fieldname = fieldname
	v.Fieldvalue = fieldvalue
	v.View = view

	return v, nil
}

// BuildAddPayload builds the payload for the entity add endpoint from CLI
// flags.
func BuildAddPayload(entityAddBody string, entityAddAuthentication string) (*entity.AddPayload, error) {
	var err error
	var body AddRequestBody
	{
		err = json.Unmarshal([]byte(entityAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"entity\": {\n         \"folder\": \"ABCDE\",\n         \"inactive\": false,\n         \"name\": \"Departamento do Governo dos Açores\"\n      }\n   }'")
		}
	}
	var authentication *string
	{
		if entityAddAuthentication != "" {
			authentication = &entityAddAuthentication
		}
	}
	v := &entity.AddPayload{}
	if body.Entity != nil {
		v.Entity = marshalEntityRequestBodyToEntityEntity(body.Entity)
	}
	v.Authentication = authentication

	return v, nil
}

// BuildUpdatePayload builds the payload for the entity update endpoint from
// CLI flags.
func BuildUpdatePayload(entityUpdateBody string, entityUpdateID string) (*entity.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(entityUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"entity\": {\n         \"folder\": \"ABCDE\",\n         \"inactive\": false,\n         \"name\": \"Departamento do Governo dos Açores\"\n      }\n   }'")
		}
		if body.Entity != nil {
			if err2 := ValidateEntityRequestBody(body.Entity); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var id string
	{
		id = entityUpdateID
	}
	v := &entity.UpdatePayload{}
	if body.Entity != nil {
		v.Entity = marshalEntityRequestBodyToEntityEntity(body.Entity)
	}
	v.ID = id

	return v, nil
}

// BuildRemovePayload builds the payload for the entity remove endpoint from
// CLI flags.
func BuildRemovePayload(entityRemoveID string) (*entity.RemovePayload, error) {
	var id string
	{
		id = entityRemoveID
	}
	v := &entity.RemovePayload{}
	v.ID = id

	return v, nil
}
