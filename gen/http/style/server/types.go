// Code generated by goa v3.1.1, DO NOT EDIT.
//
// style HTTP server types
//
// Command:
// $ goa gen jpmenezes.com/idebo/design

package server

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
	style "jpmenezes.com/idebo/gen/style"
	styleviews "jpmenezes.com/idebo/gen/style/views"
)

// AddRequestBody is the type of the "style" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// Name of style
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// StyleResultResponseTinyCollection is the type of the "style" service "list"
// endpoint HTTP response body.
type StyleResultResponseTinyCollection []*StyleResultResponseTiny

// ShowResponseBody is the type of the "style" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// ID is the unique id of the style.
	ID string `form:"id" json:"id" xml:"id"`
	// Name of style
	Name string `form:"name" json:"name" xml:"name"`
}

// ShowResponseBodyTiny is the type of the "style" service "show" endpoint HTTP
// response body.
type ShowResponseBodyTiny struct {
	// ID is the unique id of the style.
	ID string `form:"id" json:"id" xml:"id"`
	// Name of style
	Name string `form:"name" json:"name" xml:"name"`
}

// ShowNotFoundResponseBody is the type of the "style" service "show" endpoint
// HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// ID of missing viewer
	ID string `form:"id" json:"id" xml:"id"`
}

// StyleResultResponseTiny is used to define fields on response body types.
type StyleResultResponseTiny struct {
	// ID is the unique id of the style.
	ID string `form:"id" json:"id" xml:"id"`
	// Name of style
	Name string `form:"name" json:"name" xml:"name"`
}

// NewStyleResultResponseTinyCollection builds the HTTP response body from the
// result of the "list" endpoint of the "style" service.
func NewStyleResultResponseTinyCollection(res styleviews.StyleResultCollectionView) StyleResultResponseTinyCollection {
	body := make([]*StyleResultResponseTiny, len(res))
	for i, val := range res {
		body[i] = marshalStyleviewsStyleResultViewToStyleResultResponseTiny(val)
	}
	return body
}

// NewShowResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "style" service.
func NewShowResponseBody(res *styleviews.StyleResultView) *ShowResponseBody {
	body := &ShowResponseBody{
		ID:   *res.ID,
		Name: *res.Name,
	}
	return body
}

// NewShowResponseBodyTiny builds the HTTP response body from the result of the
// "show" endpoint of the "style" service.
func NewShowResponseBodyTiny(res *styleviews.StyleResultView) *ShowResponseBodyTiny {
	body := &ShowResponseBodyTiny{
		ID:   *res.ID,
		Name: *res.Name,
	}
	return body
}

// NewShowNotFoundResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "style" service.
func NewShowNotFoundResponseBody(res *style.NotFound) *ShowNotFoundResponseBody {
	body := &ShowNotFoundResponseBody{
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewShowPayload builds a style service show endpoint payload.
func NewShowPayload(id string, view *string) *style.ShowPayload {
	v := &style.ShowPayload{}
	v.ID = id
	v.View = view

	return v
}

// NewAddStyle builds a style service add endpoint payload.
func NewAddStyle(body *AddRequestBody) *style.Style {
	v := &style.Style{
		Name: *body.Name,
	}

	return v
}

// NewRemovePayload builds a style service remove endpoint payload.
func NewRemovePayload(id string) *style.RemovePayload {
	v := &style.RemovePayload{}
	v.ID = id

	return v
}

// ValidateAddRequestBody runs the validations defined on AddRequestBody
func ValidateAddRequestBody(body *AddRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 255, false))
		}
	}
	return
}
