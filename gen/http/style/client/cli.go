// Code generated by goa v3.1.1, DO NOT EDIT.
//
// style HTTP client CLI support package
//
// Command:
// $ goa gen jpmenezes.com/idebo/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
	style "jpmenezes.com/idebo/gen/style"
)

// BuildShowPayload builds the payload for the style show endpoint from CLI
// flags.
func BuildShowPayload(styleShowID string, styleShowView string) (*style.ShowPayload, error) {
	var err error
	var id string
	{
		id = styleShowID
	}
	var view *string
	{
		if styleShowView != "" {
			view = &styleShowView
			if view != nil {
				if !(*view == "default" || *view == "tiny") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "tiny"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &style.ShowPayload{}
	v.ID = id
	v.View = view

	return v, nil
}

// BuildAddPayload builds the payload for the style add endpoint from CLI flags.
func BuildAddPayload(styleAddBody string) (*style.Style, error) {
	var err error
	var body AddRequestBody
	{
		err = json.Unmarshal([]byte(styleAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"name\": \"Estilo SLD\"\n   }'")
		}
		if utf8.RuneCountInString(body.Name) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 255, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &style.Style{
		Name: body.Name,
	}

	return v, nil
}

// BuildRemovePayload builds the payload for the style remove endpoint from CLI
// flags.
func BuildRemovePayload(styleRemoveID string) (*style.RemovePayload, error) {
	var id string
	{
		id = styleRemoveID
	}
	v := &style.RemovePayload{}
	v.ID = id

	return v, nil
}
